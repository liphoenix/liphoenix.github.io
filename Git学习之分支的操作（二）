显示分支一览表
git branch
git branch命令可以将分支名列表显示，同时可以确认当前所在的分支。
$ git branch * master
可以看到master分支左侧标有“*”（星号），表示这是我们当前所在的分支。也就是说，我们正在master分支下进行开发。结果中没有显示其他分支名，表示本地仓库中只存在master一个分支。
创建、切换分支
git checkout -b
如果想以当前的master分支为基础创建新的分支，我们需要用到git checkout -b命令。
切换到feature-A分支并进行提交。
执行下面的命令，创建名为feature-A的分支。
$ git checkout -b feature-A
Switched to a new branch 'feature-A'
实际上，连续执行下面两条命令也能收到同样的效果。
$ git branch feature-A
$ git checkout feature-A
创建feature-A分支，并将当前分支切换为feature-A分支。这时再来查看分支列表，会显示我们处于feature-A分支下。
$ git branch
* feature-A
  master
feature-A分支左侧标有“*”，表示当前分支为feature-A。在这个状态下像正常开发那样修改代码、执行git add命令并进行提交的话，代码就会提交至feature-A分支。像这样不断对一个分支（例如feature-A）进行提交的操作，我们称为“培育分支”。
下面来实际操作一下，在README.md文件中添加一行。
feature-A
这里我们添加了feature-A这样一行字母，然后进行提交。
$ git add README.md
$ git commit -m "Add feature-A"
[feature-A 320739b] Add feature-A
 1 file changed, 1 insertion(+)
于是，这一行就添加到feature-A分支中了。
切换到master分支
现在我们再来看一看master分支有没有受影响。首先切换至master分支。
$ git checkout master
Switched to branch 'master'
然后查看README.md文件，会发现README.md文件仍然保持原先的状态，并没有被添加文字。feature-A分支的更改不会影响到master分支，这正是在开发中创建分支的优点。只要创建多个分支，就可以在不互影响的情况下同时进行多个功能的开发。
切换回上一个分支
现在，我们再切换回feature-A分支。
$ git checkout -
Switched to branch 'feature-A'
像上面这样用“-”（连字符）代替分支名，就可以切换至上一个分支。当然，将“-”替换成feature-A同样可以切换至feature-A分支。
特性分支
特性分支顾名思义，是集中实现单一特性（主题），除此之外不进行任何作业的分支。在日常开发中，往往会创建数个特性分支，同时在此之外再保留一个随时可以发布软件的稳定分支。稳定分支的角色通常由master分支担当。
之前我们创建了feature-A分支，这一分支主要实现feature-A，除feature-A的实现之外不进行任何作业。即便在开发过程中发现了BUG，也需要再创建新的分支，在新分支中进行修正。
基于特定主题的作业在特性分支中进行，主题完成后再与master分支合并。只要保持这样一个开发流程，就能保证master分支可以随时供人查看。这样一来，其他开发者也可以放心大胆地从master分支创建新的特性分支。
主干分支
主干分支是刚才我们讲解的特性分支的原点，同时也是合并的终点。通常人们会用master分支作为主干分支。主干分支中并没有开发到一半的代码，可以随时供他人查看。
有时我们需要让这个主干分支总是配置在正式环境中，有时又需要用标签Tag等创建版本信息，同时管理多个版本发布，拥有多个版本发布时，主干分支也有多个。
合并分支
git merge
接下来，我们假设feature-A已经实现完毕，想要将它合并到主干分支master中。首先切换到master分支。
$ git checkout master
Switched to branch 'master'
然后合并feature-A分支。为了在历史记录中明确记录下本次分支合并，我们需要创建合并提交。因此，在合并时加上--no-ff参数。
$ git merge --no-ff feature-A
随后编辑器会启动，用于录入合并提交的信息。
Merge branch 'feature-A'

# Please enter a commit message to explain why this merge is necessary,
# especially if it merges an updated upstream into a topic branch.
#
# Lines starting with '#' will be ignored, and an empty message aborts
# the commit.
默认信息中已经包含了是从feature-A分支合并过来的相关内容，所以可不必做任何更改。将编辑器中显示的内容保存，关闭编辑器，然后就会看到下面的结果。
Merge made by the 'recursive' strategy.
 README.md | 1 +
 1 file changed, 1 insertion(+)
这样一来，feature-A分支的内容就合并到master分支中了。
以图表形式查看分支
git log --graph
用git log --graph命令进行查看的话，能很清楚地看到特性分支（feature-A）提交的内容已被合并。除此之外，特性分支的创建以及合并也都清楚明了。
$ git log --graph
*   commit a5f6cbf52a36dd104e131e32e67531656640c0c3
|\  Merge: c87f9ae 320739b
| | Author: frankphper <1678723151@qq.com>
| | Date:   Mon Apr 11 08:16:48 2016 +0800
| |
| |     Merge branch 'feature-A'
| |
| * commit 320739b163a92ab90e24abfb814ab7fc09e9c9a0
|/  Author: frankphper <1678723151@qq.com>
|   Date:   Mon Apr 11 07:59:05 2016 +0800
|
|       Add feature-A
|
* commit c87f9ae6da0ccffedda289c55e55e7bc7900dfe0
| Author: frankphper <1678723151@qq.com>
| Date:   Sun Apr 10 23:33:16 2016 +0800
|
|     Add #Git学习
|
* commit c75e47ad83d604e234eac38bb3aec57226f79974
| Author: frankphper <1678723151@qq.com>
| Date:   Sun Apr 10 23:01:24 2016 +0800
|
|     测试使用编辑器记述详细提交信息
|
* commit 858ba4b5b0368c1af88856ea94c5cbbd9eab51fc
  Author: frankphper <1678723151@qq.com>
  Date:   Sun Apr 10 22:49:19 2016 +0800

      My first commit
git log --graph命令可以用图表形式输出提交日志，非常直观
